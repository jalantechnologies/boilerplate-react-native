# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  desc "Fetches the latest version code from the Play Console and increments it by 1"
  lane :fetch_and_increment_build_number do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    version_codes = google_play_track_version_codes(
      package_name: app_identifier,
      track: "production",
      json_key: ENV["ANDROID_JSON_KEY_FILE"]
    )
    
    updated_version_code = version_codes[0] + 1
    
    increment_version_code(
      version_code: updated_version_code
    )
  end

  desc "Sync version from package.json to Android and iOS"
    lane :sync_versions do
      package_json_path = "../package.json"
      package_json = JSON.parse(File.read(package_json_path))
      version = package_json["version"]

      if version.nil? || version.empty?
        UI.user_error!("Error: Version not found in package.json")
      end

      # Convert version for Android versionCode
      major, minor, patch = version.split('.').map(&:to_i)
      version_code = (major * 10000) + (minor * 100) + patch

      ###  UPDATE ANDROID VERSION ###
      increment_version_name(version_name: version)
      increment_version_code(version_code: version_code)

      UI.success(" [Android] Synced version to #{version} (versionCode: #{version_code})")
    end

  desc "Deploy a new version to the Google Play"
  lane :deploy_android_production do

    fetch_and_increment_build_number

    gradle(
      task: "bundle",
      build_type: "release",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )
    
    upload_to_play_store(
      track: "production",
      json_key: ENV["ANDROID_JSON_KEY_FILE"],
      skip_upload_apk: true,
    )
  end
end
